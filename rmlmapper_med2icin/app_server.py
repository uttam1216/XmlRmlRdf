from flask import Flask, redirect, url_for, render_template, request
app = Flask(__name__)
final_str = ''

#redirect to a page
@app.route("/",methods=["POST","GET"])
def home():
    global final_str
    inp_ddl = ''
    inp_txt = ''
    sent_formed = ''
    if request.method == "POST":
       inp_ddl = request.form["ddl_item"]
       inp_txt = request.form["txt_item"]
       final_str, sent_formed = lst_rule_lines(final_str,inp_ddl,inp_txt)
       return render_template("index.html",ddl_item=inp_ddl,txt_item=inp_txt,l1='Rule line generated by current input is:',c1=sent_formed,l2='Total Rules generated until now is:',c2=final_str)

    if request.method == "GET":
       print('Going in get')
       return render_template("index.html")

def lst_rule_lines(final_str,inp_ddl,inp_txt):
    inp_txt = inp_txt.strip()
    if inp_ddl == 'prefix':
       if inp_txt[-1] == '.':
          temp_sent = '@prefix '+inp_txt             # is of the form @prefix rml: <http://semweb.mmlab.be/ns/rml#> .
       else:
          temp_sent = '@prefix '+inp_txt + '.'
       final_str += temp_sent + '\n'
       return final_str, temp_sent
    if inp_ddl == 'triplesMap': 
       final_str = final_str.strip()
       if final_str[-1] == ';':
          final_str = final_str[:(len(final_str)-1)]+'. \n \n \n'   #creating space between previous if any already exist and also replaeing previous one's ; by .
       if inp_txt[0] == ':':
          temp_sent = inp_txt.strip() +' a rr:TriplesMap;' # is of the form :TriplesMap a rr:TriplesMap;
       else: 
          temp_sent = ':' + inp_txt.strip() +' a rr:TriplesMap;'
       final_str += temp_sent + '\n'
       return final_str, temp_sent
    if inp_ddl == 'logicalSource': 
       temp_sent = '   rml:logicalSource  \n [ rml:source "{}"; \n rml:referenceFormulation ql:XPath; \n rml:iterator "None"; \n ];'
       temp_sent = temp_sent.format(inp_txt)
       final_str += temp_sent + '\n'
       return final_str, temp_sent
    if inp_ddl == 'iterator': 
       final_str = final_str.replace('rml:iterator "None"; \n','rml:iterator "'+inp_txt.strip()+'"; \n')
       return final_str, 'rml:iterator "'+inp_txt.strip()+'"; '
    if inp_ddl == 'subjectMap': 
       temp_sent = '  rr:subjectMap  \n [ rr:template "{}"; \n ];'
       temp_sent = temp_sent.format(inp_txt)
       final_str += temp_sent + '\n'
       return final_str, temp_sent
    if inp_ddl == 'predicateObjectMap': 
       temp_sent = '   rr:predicateObjectMap  \n [ rr:predicate "{}"; \n rr:objectMap "None"; \n ];'
       temp_sent = temp_sent.format(inp_txt)
       final_str += temp_sent + '\n'
       return final_str, temp_sent
    if inp_ddl == 'objectMap': 
       final_str = final_str.replace('rr:objectMap "None"; \n','rr:objectMap '+inp_txt.strip())
       return final_str, 'rr:objectMap '+inp_txt.strip()
       #inp_txt should be of form until further improvements are made to handle more conditional input fields
       '''
       rr:objectMap 
       [ rr:parentTriplesMap :Menge_PatientMapping;
         rr:joinCondition 
           [ rr:child "*[Patient]/@Patient_ID";  
             rr:parent "@Patient_ID";
           ];
       ]
       '''

@app.route("/admin")
def admin():
    if a == 1:
       return redirect(url_for("/")) #name of the func to which we need to redirect
    else: 
       return redirect(url_for("/")) #name of the func to which we need to redirect

if __name__ == "__main__":
   app.run()
