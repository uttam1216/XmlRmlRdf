from flask import Flask, redirect, url_for, render_template, request
app = Flask(__name__)
final_str = ''

#redirect to a page
@app.route("/",methods=["POST","GET"])
def home():
    global final_str
    inp_ddl = ''
    inp_txt = ''
    sent_formed = ''
    msg_txt = ''
    l1_txt = ''
    c1_txt = ''
    l2_txt = ''
    c2_txt = ''
    if request.method == "POST":
       inp_ddl = request.form["ddl_item"]
       inp_txt = request.form["txt_item"]
       final_str, sent_formed = lst_rule_lines(final_str,inp_ddl,inp_txt)
       if "add_rule" in request.form:
          msg_txt = 'Successfully added recent {} with its respective text to exisiting Rules !!!'
          msg_txt = msg_txt.format(inp_ddl)
          l1_txt = 'Rule line generated by current input is:'
          c1_txt = sent_formed
          l2_txt = 'Total Rules generated until now:'
          c2_txt = final_str
       if "save_to_file" in request.form:
          if final_str.strip()[-1] == ';':
             final_str = final_str.strip()[:(len(final_str.strip())-1)]+'. \n \n \n'   #replacing ; by . as terminating string marking end of the rule file
          try:
              with open('rules.rml.ttl', 'w') as f:
                   f.write(final_str)
              f.close()
              msg_txt = 'Rules saved in file rules.rml.ttl !!!'
              l1_txt = ''
              c1_txt = ''
              l2_txt = ''
              c2_txt = ''
          except Exception as ex:
              msg_txt = 'Some exception while writing rules to file !!!'
              print(ex)
              pass
       if "execute_rules" in request.form:
          try:
             #system specific command to run the python script
             os.system('python /home/ukumar/Desktop/med2icin/rmlm_transform_inp_xml_to_rml.py')
             #rmlm_transform_inp_xml_to_rml.py by default calls our recently saved rules.rml.ttl file.
             msg_txt = 'Rules file executed Successfully !!!'
             l1_txt = ''
             c1_txt = ''
             l2_txt = ''
             c2_txt = ''
          except Exception as ex:
             msg_txt = 'Exception while executing the rules file !!!'
             print(ex)
             pass

       return render_template("index.html",ddl_item=inp_ddl,txt_item=inp_txt,msg=msg_txt,l1=l1_txt,c1=c1_txt,l2=l2_txt,c2=c2_txt)

    if request.method == "GET":
       print('Going in get')
       return render_template("index.html")

#function to frame rules based on input received from the Item Dropdownlist and its respective text
def lst_rule_lines(final_str,inp_ddl,inp_txt):
    inp_txt = inp_txt.strip()
    if inp_ddl == 'prefix':
       if inp_txt[-1] == '.':
          temp_sent = '@prefix '+inp_txt+ ' '            # is of the form @prefix rml: <http://semweb.mmlab.be/ns/rml#> .
       else:
          temp_sent = '@prefix '+inp_txt + '. '
       final_str += temp_sent + '\n'
       return final_str, temp_sent
    if inp_ddl == 'triplesMap': 
       if final_str.strip()[-1] == ';':
          final_str = final_str.strip()[:(len(final_str.strip())-1)]+'. \n \n \n'   #creating space between previous if any already exist and also replaeing previous one's ; by .
       else:
          final_str = final_str + '\n'
       if inp_txt[0] == ':':
          temp_sent = inp_txt.strip() +' a rr:TriplesMap;' # is of the form :TriplesMap a rr:TriplesMap;
       else: 
          temp_sent = ':' + inp_txt.strip() +' a rr:TriplesMap;'
       final_str += temp_sent + '\n'
       return final_str, temp_sent
    if inp_ddl == 'logicalSource': 
       temp_sent = '   rml:logicalSource  \n [ rml:source "{}"; \n rml:referenceFormulation ql:XPath; \n rml:iterator "None"; \n ];'
       temp_sent = temp_sent.format(inp_txt)
       final_str += temp_sent + '\n'
       return final_str, temp_sent
    if inp_ddl == 'iterator': 
       final_str = final_str.replace('rml:iterator "None"; \n','rml:iterator "'+inp_txt.strip()+'"; \n')
       return final_str, 'rml:iterator "'+inp_txt.strip()+'"; '
    if inp_ddl == 'subjectMap': 
       temp_sent = '  rr:subjectMap  \n [ rr:template "{}"; \n ];'
       temp_sent = temp_sent.format(inp_txt)
       final_str += temp_sent + '\n'
       return final_str, temp_sent
    if inp_ddl == 'predicateObjectMap': 
       temp_sent = '   rr:predicateObjectMap  \n [ rr:predicate {}; \n rr:objectMap "None"; \n ];'
       temp_sent = temp_sent.format(inp_txt)
       final_str += temp_sent + '\n'
       return final_str, temp_sent
    if inp_ddl == 'objectMapConst': 
       rep_str = 'rr:objectMap \n [ \n rr:constant {}; \n ]'
       rep_str = rep_str.format(inp_txt.strip())   #inp_txt.strip() should be like "pmm:MELDER_ID" without double quotes 
       final_str = final_str.replace('rr:objectMap "None"; \n',rep_str)
       return final_str, rep_str
    if inp_ddl == 'objectMapRef': 
       rep_str = 'rr:objectMap \n [ \n rml:reference "{}"; \n ]'
       rep_str = rep_str.format(inp_txt.strip())   #inp_txt.strip() should be a field example "Absender_Bezeichnung" without double quotes 
       final_str = final_str.replace('rr:objectMap "None"; \n',rep_str)
       return final_str, rep_str
    if inp_ddl == 'objectMapParentTriples': 
       ''' # of following form to be made with last 3 if conditions
       rr:objectMap 
       [ rr:parentTriplesMap :Menge_PatientMapping;
         rr:joinCondition 
           [ rr:child "*[Patient]/@Patient_ID";  
             rr:parent "@Patient_ID";
           ];
       ]
       '''
       rep_str = 'rr:objectMap \n [ \n rr:parentTriplesMap :{}; \n rr:joinCondition \n [ rr:child "None"; \n rr:parent "None"; \n ]; \n]'
       rep_str = rep_str.format(inp_txt.strip())   #inp_txt.strip() should be a field example "Menge_PatientMapping" without double quotes 
       final_str = final_str.replace('rr:objectMap "None"; \n',rep_str)
       return final_str, rep_str
    if inp_ddl == 'objectMapParent': 
       final_str = final_str.replace('rr:parent "None"; \n','rr:parent "'+inp_txt.strip()+'"; \n') # inp_txt of form @Patient_ID
       return final_str, 'rr:parent '+inp_txt.strip()+'"; \n'
    if inp_ddl == 'objectMapChild': 
       final_str = final_str.replace('rr:child "None"; \n','rr:child "'+inp_txt.strip()+'"; \n') # inp_txt of form *[Patient]/@Patient_ID
       return final_str, 'rr:child "'+inp_txt.strip()+'"; \n'
       #inp_txt should be of form until further improvements are made to handle more conditional input fields


@app.route("/admin")
def admin():
    if a == 1:
       return redirect(url_for("/")) #name of the func to which we need to redirect
    else: 
       return redirect(url_for("/")) #name of the func to which we need to redirect

if __name__ == "__main__":
   app.run()
